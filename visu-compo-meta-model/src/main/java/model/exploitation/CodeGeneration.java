package model.exploitation;

import metaclasses.Dashboard;
import metaclasses.Format;
import metaclasses.Visualization;
import org.stringtemplate.v4.ST;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.STGroupDir;
import utils.implementation.AmChartFormater;
import utils.interfaces.DataDeserializer;
import utils.FileOperation;
import utils.implementation.SenMLDeserializer;
import utils.implementation.SmartCampusDeserializer;

import java.io.IOException;
import java.nio.file.Paths;
import java.util.HashMap;

/**
 * Created by Ivan Logre on 25/06/2014.
 */
public class CodeGeneration {

    /*
     * This function get the string template pattern and fill it with relevant information from the given visu-compo model
     */
    public static String codeGeneration(Dashboard dashboard) throws IOException {

        // We grab the group of string pattern
        String STpath = Paths.get("").toAbsolutePath().toString()+"/visu-compo-meta-model/src/main/resources/stringtemplates/";
        STGroup group = new STGroupDir(STpath+"common",'$', '$');
        STGroup amgroup = new STGroupDir(STpath+"amchart/",'$', '$');
        //STGroup highgroup = new STGroupDir(STpath+"highchart/",'$', '$');

        //Framework
        ST myPage = group.getInstanceOf("html");

        myPage.add("imports",amgroup.getInstanceOf("import_amchart"));
        //myPage.add("imports",group.getInstanceOf("import_highchart"));

        for(Visualization visualization : dashboard.getVisualizationList()){
            //Extraction of the dataset from the data instance of the model
            String dataSource = visualization.getData().getUrl();
            //From the url, we extract the raw String of flat data formatted on JSON (senML)
            String dataset_JSON = FileOperation.getStringFromFile(dataSource);
            //Then we construct an hashmap linking each category instance with it's value
            DataDeserializer dataDeserializer = null;
            switch (visualization.getData().getFormat()){
                case SenML:
                    dataDeserializer = new SenMLDeserializer();
                    break;
                case SmartCampus:
                    dataDeserializer = new SmartCampusDeserializer();
                    break;
            }
            ConcreteData data_extracted = dataDeserializer.AffectHashMapFromSerializedData(dataset_JSON);

            String chartname = visualization.getName();

            //Data
            ST st_data = group.getInstanceOf("data");
            st_data.add("dataname", data_extracted.getName());
            // Conversion of the data HashMap of the ConcreteData instance in a format understandable by AmChart
            st_data.add("datavalues", new AmChartFormater().convertData2LibraryFormat(data_extracted));

            //Chart
            ST st_chart = amgroup.getInstanceOf("amchart");
            st_chart.add("chartname", chartname);
            st_chart.add("dataname", data_extracted.getName());
            st_chart.add("categoryname", data_extracted.getCategoryFieldName());

            //Chart Body
            ST st_chartBody = group.getInstanceOf("chartbody");
            st_chartBody.add("chartname", chartname);
            st_chartBody.add("widthpercent", 100/dashboard.getVisualizationList().size());

            //Graph
            ST st_graph = amgroup.getInstanceOf("graph");
            st_graph.add("chartname", chartname);
            st_graph.add("graphname", "mygraph"+chartname);
            st_graph.add("seriename", data_extracted.getValueFieldName());

            //Find the right specialization pattern for the wanted widget
            ST st_graphspe = amgroup.getInstanceOf("graph"+visualization.getWidgetName());
            st_graphspe.add("graphname", "mygraph"+chartname); //TODO will be edited for multi data set charts
            st_graph.add("graphspe", st_graphspe);
            st_chart.add("graphs",st_graph);

            //Framework end
            myPage.add("data", st_data);
            myPage.add("chartsscript", st_chart);
            myPage.add("chartsbody", st_chartBody);

        }

        return myPage.render();
    }
}
