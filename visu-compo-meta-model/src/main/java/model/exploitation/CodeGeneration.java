package model.exploitation;

import exception.UnhandledDataFormatException;
import exception.VisitorException;
import metaclasses.Dashboard;
import metaclasses.Resource;
import metaclasses.Visualization;
import model.exploitation.VisitorTemplate.Generator;
import org.stringtemplate.v4.ST;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.STGroupDir;
import utils.implementation.*;
import utils.FileOperation;
import utils.interfaces.DataDeserializer;
import utils.interfaces.DataTargetFormater;

import java.io.IOException;
import java.nio.file.Paths;

/**
 * Created by Ivan Logre on 25/06/2014.
 */
public class CodeGeneration {

    public static String codeGeneration(Dashboard dashboard) throws VisitorException {
        Generator gen = new Generator();
        dashboard.accept(gen);
        return gen.myPageToString();
    }

    /* We grab the group of string pattern
    private static final String STpath = Paths.get("").toAbsolutePath().toString() + "/visu-compo-meta-model/src/main/resources/stringtemplates/";
    private static final STGroup group = new STGroupDir(STpath + "common", '$', '$');
    private static final STGroup amgroup = new STGroupDir(STpath + "amchart/", '$', '$');
    private static final STGroup highgroup = new STGroupDir(STpath + "highchart/", '$', '$');



    /*
     * This function get the string template pattern and fill it with relevant information from the given visu-compo model

    public static String codeGeneration(Dashboard dashboard) throws IOException, UnhandledDataFormatException {

        //Framework
        ST myPage = group.getInstanceOf("html");
        if(isAmChartNeeded(dashboard))
            myPage.add("imports",amgroup.getInstanceOf("import_amchart"));
        if(isHighChartNeeded(dashboard))
            myPage.add("imports",highgroup.getInstanceOf("import_highchart"));

        for(Visualization visualization : dashboard.getVisualizationList()){
            String chartName = visualization.getName();

            for(Resource resource : visualization.getResources()) {
                //Extraction of the dataset from the data instance of the model
                String dataSource = resource.getUrl();
                //From the url, we extract the raw String of flat data formatted on JSON (senML)
                String dataset_JSON = FileOperation.getStringFromFile(dataSource);
                //Then we construct an hashmap linking each category instance with it's value
                DataDeserializer dd = null;
                switch (resource.getFormat()) {
                    case SenML:
                        dd = new SenMLDeserializer();
                        break;
                    case SmartCampus:
                        dd = new SmartCampusDeserializer();
                        break;
                    case Stacked:
                        dd = new StackedDeserializer();
                        break;
                }
                ConcreteData data_extracted = dd.getConcreteDataFromSerializedData(dataset_JSON, resource.getIndex().getName(), resource.getSerie().getName());


                ST st_chart;
                DataTargetFormater dtf;
                switch (visualization.getLibraryName()) {
                    case "AmChart":
                        dtf = new AmChartFormater();
                        st_chart = fillChartSTForAmChart(visualization, data_extracted);
                        break;
                    case "HighChart":
                        dtf = new HighChartFormater();
                        st_chart = fillChartSTForHighChart(visualization, data_extracted);
                        break;
                    default:
                        throw new UnhandledDataFormatException();
                }

                //Data
                ST st_data = group.getInstanceOf("data");
                st_data.add("dataname", data_extracted.getName());
                if (resource.getIndex().getType().equalsIgnoreCase("timestamp"))
                    st_data.add("datavalues", dtf.convertTimedData2LibraryFormat(data_extracted));
                else
                    st_data.add("datavalues", dtf.convertData2LibraryFormat(data_extracted));
                // Conversion of the data HashMap of the ConcreteData instance in a format understandable by the library


                myPage.add("data", st_data);
                myPage.add("chartsscript", st_chart);
            }

            //Chart Body
            ST st_chartBody = group.getInstanceOf("chartbody");
            st_chartBody.add("chartname", chartName);
            st_chartBody.add("widthpercent", 100/dashboard.getVisualizationList().size());

            //Framework end
            myPage.add("chartsbody", st_chartBody);

        }

        return myPage.render();
    }

    private static ST fillChartSTForAmChart(Visualization visualization, ConcreteData data_extracted){
        //Chart
        ST st_chart = amgroup.getInstanceOf("amchart");
        st_chart.add("chartname", visualization.getName());
        st_chart.add("dataname", data_extracted.getName());
        st_chart.add("categoryname", data_extracted.getCategoryFieldName());

        //TODO make it optional in function of meta data on Data
        ST st_timedoption = amgroup.getInstanceOf("timedoption");
        st_timedoption.add("chartname", visualization.getName());
        st_chart.add("timedoption",st_timedoption);

        //Graph
        ST st_graph = amgroup.getInstanceOf("graph");
        st_graph.add("chartname", visualization.getName());
        st_graph.add("graphname", "mygraph"+visualization.getName());
        st_graph.add("seriename", data_extracted.getValueFieldName());

        //Find the right specialization pattern for the wanted widget
        ST st_graphspe = amgroup.getInstanceOf("graph"+visualization.getWidgetName().replace(" ", ""));
        st_graphspe.add("graphname", "mygraph"+visualization.getName()); //TODO will be edited for multi data set charts
        st_graph.add("graphspe", st_graphspe);
        st_chart.add("graphs",st_graph);

        return st_chart;
    }

    private static ST fillChartSTForHighChart(Visualization visualization, ConcreteData data_extracted){
        //Chart
        ST st_chart = highgroup.getInstanceOf("highchart");
        st_chart.add("chartname", visualization.getName());

        ST st_options = highgroup.getInstanceOf("pie_options");

        //Graph
        ST st_graph = highgroup.getInstanceOf("graph");
        st_graph.add("dataname", data_extracted.getName());

        //Find the right specialization pattern for the wanted widget
        ST st_graphspe = highgroup.getInstanceOf("graph"+visualization.getWidgetName().replace(" ",""));

        st_graph.add("graphspe",st_graphspe);

        st_chart.add("graphs",st_graph);
        st_chart.add("options", st_options);

        return st_chart;
    }


    private static boolean isAmChartNeeded(Dashboard dashboard){
        boolean isNeeded = false;
        for(Visualization v : dashboard.getVisualizationList()) {
            if (v.getLibraryName().equalsIgnoreCase("amchart")) {
                isNeeded = true;
                break;
            }
        }
        return isNeeded;
    }

    private static boolean isHighChartNeeded(Dashboard dashboard){
        boolean isNeeded = false;
        for(Visualization v : dashboard.getVisualizationList()) {
            if (v.getLibraryName().equalsIgnoreCase("highchart")) {
                isNeeded = true;
                break;
            }
        }
        return isNeeded;
    }
    */
}
