package model.exploitation;

import metaclasses.Format;
import metaclasses.Visualization;
import org.stringtemplate.v4.ST;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.STGroupDir;
import utils.implementation.AmChartFormater;
import utils.interfaces.DataDeserializer;
import utils.FileOperation;
import utils.implementation.SenMLDeserializer;
import utils.implementation.SmartCampusDeserializer;

import java.nio.file.Paths;
import java.util.HashMap;

/**
 * Created by Ivan Logre on 25/06/2014.
 */
public class CodeGeneration {

    /*
     * This function get the string template pattern and fill it with relevant information from the given visu-compo model
     */
    public static String codeGeneration(Visualization visualization){

        //Extraction of the dataset from the data instance of the model
        String dataSource = visualization.getData().getUrl();
        //From the url, we extract the raw String of flat data formatted on JSON (senML)
        String dataset_JSON = FileOperation.getStringFromFile(dataSource);
        //Then we construct an hashmap linking each category instance with it's value
        DataDeserializer dataDeserializer = null;
        switch (visualization.getData().getFormat()){
            case SenML:
                dataDeserializer = new SenMLDeserializer();
                break;
            case SmartCampus:
                dataDeserializer = new SmartCampusDeserializer();
                break;
        }
        ConcreteData data_extracted = dataDeserializer.AffectHashMapFromSerializedData(dataset_JSON);


        // We grab the group of string pattern
        STGroup group = new STGroupDir(Paths.get("").toAbsolutePath().toString()+"/visu-compo-meta-model/src/main/resources/stringtemplates/",'$', '$');

        //Framework
        ST myPage = group.getInstanceOf("html");

        //Data
        ST st_data = group.getInstanceOf("data");
        st_data.add("dataname", data_extracted.getName());
        // Convertion of the data HashMap of the ConcreteData instance in a format understandable by AmChart
        st_data.add("datavalues", new AmChartFormater().convertData2LibraryFormat(data_extracted));

        //Chart
        ST st_chart = group.getInstanceOf("chart");
        st_chart.add("chartname", "mychart");
        st_chart.add("dataname", data_extracted.getName());
        st_chart.add("categoryname", data_extracted.getCategoryFieldName());

        //Chart Body
        ST st_chartBody = group.getInstanceOf("chartbody");
        st_chartBody.add("chartname", "mychart");
        st_chartBody.add("widthpercent", 100);

        //Graph
        ST st_graph = group.getInstanceOf("graph");
        st_graph.add("chartname", "mychart");
        st_graph.add("graphname", "mygraph");
        st_graph.add("seriename", data_extracted.getValueFieldName());

        //Find the right specialization pattern for the wanted widget
        ST st_graphspe = group.getInstanceOf("graph"+visualization.getWidgetName());
        st_graphspe.add("graphname", "mygraph");
        st_graph.add("graphspe", st_graphspe);
        st_chart.add("graphs",st_graph);

        //Framework end
        myPage.add("data", st_data);
        myPage.add("chartsscript", st_chart);
        myPage.add("chartsbody", st_chartBody);

        return myPage.render();
    }
}
