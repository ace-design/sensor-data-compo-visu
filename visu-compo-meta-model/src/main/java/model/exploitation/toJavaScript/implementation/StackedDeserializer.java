package model.exploitation.toJavaScript.implementation;

import metaclasses.Resource;
import model.exploitation.toJavaScript.metaclasse.Source;
import org.json.JSONArray;
import org.json.JSONObject;
import utils.FileOperation;
import model.exploitation.toJavaScript.interfaces.DataDeserializer;


/**
 * Created by Ivan Logre on 01/07/2014.
 */
public class StackedDeserializer implements DataDeserializer {

    /*
     * This function deserialize a JSON string to return an hashmap according to the senml format description
     * H :  bt = base time, e = set of value
     *      t = time of capture of this specific value relatively to the base time, v = value
     * /!\ in test mode, ignore the base time to temporally align two datasets
     */
    public Source serializedResource2Pivot(Resource resource){
        try {
            String serialized = FileOperation.getStringFromFile(resource.getUrl());
            Source res = new Source(resource.getSerie().getName()+resource.getName());

            JSONObject rootSource = new JSONObject(serialized);
            JSONArray values = rootSource.getJSONArray("e");
            for (int i = values.length() - 1; i >= 0; i--) {
                JSONObject v = values.getJSONObject(i);
                res.put(v.getString(resource.getIndex().getName()), v.getDouble(resource.getSerie().getName()));
            }
        return res;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    }
