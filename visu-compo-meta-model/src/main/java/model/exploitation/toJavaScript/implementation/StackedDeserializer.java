package model.exploitation.toJavaScript.implementation;

import metaclasses.resource.AtomicResource;
import metaclasses.resource.CompositeResource;
import metaclasses.resource.Element;
import metaclasses.resource.Resource;
import model.exploitation.toJavaScript.metaclasse.DoubleElem;
import model.exploitation.toJavaScript.metaclasse.ResourceInstance;
import model.exploitation.toJavaScript.metaclasse.StringElem;
import org.json.JSONArray;
import org.json.JSONObject;
import utils.FileOperation;
import model.exploitation.toJavaScript.interfaces.DataDeserializer;


/**
 * Created by Ivan Logre on 01/07/2014.
 */
public class StackedDeserializer implements DataDeserializer {

    @Override
    public ResourceInstance extractInstancesFromResource(AtomicResource atomicResource) {
        ResourceInstance result = new ResourceInstance(atomicResource);
        JSONObject rootSource = null;
        try {
            rootSource = new JSONObject(FileOperation.getStringFromFile(atomicResource.getUrl()));
        } catch (Exception e) {e.printStackTrace();} //TODO

        JSONArray values = rootSource.getJSONArray("e");
        for (int i = values.length() - 1; i >= 0; i--) {
            JSONObject v = values.getJSONObject(i);
            StringElem key = new StringElem(atomicResource.getKey(),v.getString(atomicResource.getKey().getName()));
            result.addKey(key);
            for(Element e : atomicResource.getValues())
                key.addValue(new DoubleElem(e,v.getDouble(e.getName())));
        }
        return result;
    }

    @Override
    public ResourceInstance extractInstancesFromResource(CompositeResource compositeResource) {
        return null; //TODO
    }

    /*
         * This function deserialize a JSON string to return an hashmap according to the senml format description
         * H :  bt = base time, e = set of value
         *      t = time of capture of this specific value relatively to the base time, v = value
         * /!\ in test mode, ignore the base time to temporally align two datasets
         */
    public ResourceInstance extractInstancesFromResource(Resource resource){
        switch(resource.getClass().getSimpleName()){
            case "CompositeResource" : return extractInstancesFromResource((CompositeResource) resource);
            case "AtomicResource" : return extractInstancesFromResource((AtomicResource) resource);
        }
        return null;
    }

}
