package model.exploitation.toJavaScript.implementation.deserializers;

import metaclasses.resource.*;
import model.exploitation.toJavaScript.interfaces.DataDeserializer;
import model.exploitation.toJavaScript.metaclasse.*;
import org.json.JSONArray;
import org.json.JSONObject;
import utils.FileOperation;


/**
 * Created by Ivan Logre on 01/07/2014.
 */
public class CustomDeserializer implements DataDeserializer {

    @Override
    public ResourceInstance extractInstancesFromResource(Resource resource) {
        switch(resource.getClass().getSimpleName()){
            case "CompositeResource" : return extractInstancesFromResource((CompositeResource) resource);
            case "AtomicResource" : return extractInstancesFromResource((AtomicResource) resource);
        }
        return null;
    }

    @Override
    public ResourceInstance extractInstancesFromResource(CompositeResource compositeResource) {
        return null; //TODO
    }

    /*
         * This function deserialize a JSON string to return an hashmap according to the senml format description
         * H :  bt = base time, e = set of value
         *      t = time of capture of this specific value relatively to the base time, v = value
         * /!\ in test mode, ignore the base time to temporally align two datasets
         */
    public ResourceInstance extractInstancesFromResource(AtomicResource atomicResource){
        ResourceInstance result = new ResourceInstance(atomicResource);
        JSONArray values = null;
        try {
            values = new JSONArray(FileOperation.getStringFromFile(atomicResource.getUrl()));
        } catch (Exception e) {e.printStackTrace();} //TODO
        for (int i = values.length() - 1; i >= 0; i--) {
            JSONObject v = values.getJSONObject(i);
            ElementInstance key = null;
            switch(atomicResource.getKey().getType()) {
                case textual_type: key = new StringElem(atomicResource.getKey(),v.getString(atomicResource.getKey().getName()));break;
                case double_type : key = new DoubleElem(atomicResource.getKey(),v.getDouble(atomicResource.getKey().getName()));break;
                case long_type   : key = new LongElem(atomicResource.getKey(),v.getLong(atomicResource.getKey().getName())); break;
                case boolean_type: key = new BooleanElem(atomicResource.getKey(),v.getBoolean(atomicResource.getKey().getName()));break;
            }
            result.addKey(key);
            for(Element e : atomicResource.getValues()) {
                ElementInstance value = null;
                switch(e.getType()) {
                    case textual_type: value = new StringElem(e,v.getString(e.getName()));break;
                    case double_type : value = new DoubleElem(e, v.getDouble(e.getName()));break;
                    case long_type   : value = new LongElem(e,v.getLong(e.getName())); break;
                    case boolean_type: value = new BooleanElem(e,v.getBoolean(e.getName()));break;
                }
                key.getValues().add(value);
            }
        }
        return result;
    }
    //TODO transform in a real generic deserializer using composites

}
