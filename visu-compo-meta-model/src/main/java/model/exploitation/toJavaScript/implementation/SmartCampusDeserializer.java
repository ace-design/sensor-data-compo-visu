package model.exploitation.toJavaScript.implementation;

import metaclasses.resource.AtomicResource;
import metaclasses.resource.CompositeResource;
import metaclasses.resource.Element;
import metaclasses.resource.Resource;
import model.exploitation.toJavaScript.metaclasse.DoubleElem;
import model.exploitation.toJavaScript.metaclasse.LongElem;
import model.exploitation.toJavaScript.metaclasse.ResourceInstance;
import org.json.JSONArray;
import org.json.JSONObject;
import utils.FileOperation;
import model.exploitation.toJavaScript.interfaces.DataDeserializer;

/**
 * Created by Ivan Logre on 01/07/2014.
 */
public class SmartCampusDeserializer implements DataDeserializer {

    //TODO comment
    public ResourceInstance extractInstancesFromResource(AtomicResource atomicResource){
        ResourceInstance result = new ResourceInstance(atomicResource);
        JSONObject rootSource = null;
        try {
            rootSource = new JSONObject(FileOperation.getStringFromFile(atomicResource.getUrl()));
        } catch (Exception e) {e.printStackTrace();} //TODO

        JSONArray values = rootSource.getJSONArray("values");

        for (int i = values.length() - 1; i >= 0; i--) {
            JSONObject v = values.getJSONObject(i);
            LongElem key = new LongElem(atomicResource.getKey(),v.getLong(atomicResource.getKey().getName()));
            result.addKey(key);
            for(Element e : atomicResource.getValues())
                key.addValue(new DoubleElem(e,v.getDouble(e.getName())));
        }
        return result;
    }

    @Override
    public ResourceInstance extractInstancesFromResource(CompositeResource compositeResource) {
        return null;//TODO
    }

    @Override
    public ResourceInstance extractInstancesFromResource(Resource resource) {
        switch(resource.getClass().getSimpleName()){
            case "CompositeResource" : return extractInstancesFromResource((CompositeResource) resource);
            case "AtomicResource" : return extractInstancesFromResource((AtomicResource) resource);
        }
        return null;
    }
}
