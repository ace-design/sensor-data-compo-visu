package model.exploitation.toJavaScript.implementation;

import metaclasses.resource.AtomicResource;
import metaclasses.resource.CompositeResource;
import metaclasses.resource.Element;
import metaclasses.resource.Resource;
import model.exploitation.toJavaScript.metaclasse.Source;
import org.json.JSONArray;
import org.json.JSONObject;
import utils.FileOperation;
import model.exploitation.toJavaScript.interfaces.DataDeserializer;

import java.util.ArrayList;
import java.util.List;


/**
 * Created by Ivan Logre on 01/07/2014.
 */
public class SenMLDeserializer implements DataDeserializer {

    @Override
    public List<Source> serializedResource2Pivot(Resource resource) {
        switch(resource.getClass().getSimpleName()){
            case "CompositeResource" : return serializedResource2Pivot((CompositeResource)resource);
            case "AtomicResource" : return serializedResource2Pivot((AtomicResource)resource);
        }
        return null;
    }

    @Override
    public List<Source> serializedResource2Pivot(CompositeResource compositeResource) {
        return null; //TODO
    }

    /*
         * This function deserialize a JSON string to return an hashmap according to the senml format description
         * H :  bt = base time, e = set of value
         *      t = time of capture of this specific value relatively to the base time, v = value
         * /!\ in test mode, ignore the base time to temporally align two datasets
         */
    public List<Source> serializedResource2Pivot(AtomicResource atomicResource){
        List<Source> result = new ArrayList<>();
        String serialized = "";
        try {
            serialized = FileOperation.getStringFromFile(atomicResource.getUrl());
        } catch (Exception e) {e.printStackTrace();} //TODO
        for(Element e : atomicResource.getValues()) {
            Source source = new Source(e.getName()+atomicResource.getName());
            JSONObject rootSource = new JSONObject(serialized);

            int baseTime = rootSource.getInt("bt");

            JSONArray values = rootSource.getJSONArray("e");
            for (int i = values.length() - 1; i >= 0; i--) {
                JSONObject v = values.getJSONObject(i);
                source.put(v.getLong(atomicResource.getKey().getName()) + baseTime, v.getDouble(e.getName()));
            }
            result.add(source);
        }

        return result;
    }

}
