package model.exploitation.toJavaScript.metaclasse;

import metaclasses.Visualization;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by ivan on 02/09/2014.
 */
public class VisualizationInstance {

    public Visualization father;
    private List<ResourceInstance> resources;

    public VisualizationInstance(Visualization father) {
        this.father = father;
        this.resources = new ArrayList<>();
    }

    /*
    Hypothesis : data are sorted chronologically or anti-chronologically.
     */
    public ElementInstance getFirstIndex() {
        List<ElementInstance> competitors = new ArrayList<>();
        for (ResourceInstance currentRI : this.resources){
            ElementInstance first = currentRI.getKeys().get(0);
            ElementInstance last = currentRI.getKeys().get(currentRI.getKeys().size()-1);
            if(first.compareTo(last)>0)
                competitors.add(last);
            else
                competitors.add(first);
        }
        ElementInstance first = competitors.get(0);
        for(ElementInstance ei : competitors)
            if(first.compareTo(ei)>0)
                first = ei;
        return first;
    }


//        for(ResourceInstance currentRI : this.resources)
//            for(ElementInstance currentKey : currentRI.getKeys())
//                if(first.compareTo(currentKey)>0)
//                    first = currentKey;

    public Boolean isEmpty(){
        Boolean res = true;
        for(ResourceInstance currentRI : this.resources)
            if(!currentRI.isEmpty())
                res = false;
        return res;
    }

    public void addResourceInstance(ResourceInstance ri){
        this.resources.add(ri);
        ri.setVisualizationInstance(this);
    }


    public List<ResourceInstance> getResourceInstances(ResourceInstance ri){
        return this.resources;
    }

    public void remove(ResourceInstance ri){
        this.resources.remove(ri);
    }
}
