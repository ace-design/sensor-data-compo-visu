package model.exploitation.VisitorTemplate;

import exception.IncoherentConcernException;
import exception.UnableToMoveResources;
import exception.UnhandledDataFormatException;
import exception.VisitorException;
import metaclasses.Visualization;
import metaclasses.concern.Concern;
import metaclasses.resource.AtomicResource;
import metaclasses.resource.CompositeResource;
import metaclasses.resource.Resource;
import model.exploitation.toJavaScript.implementation.deserializers.CustomDeserializer;
import model.exploitation.toJavaScript.implementation.deserializers.SenMLDeserializer;
import model.exploitation.toJavaScript.implementation.deserializers.SmartCampusDeserializer;
import model.exploitation.toJavaScript.implementation.deserializers.StackedDeserializer;
import model.exploitation.toJavaScript.implementation.formaters.MapEtienneFormater;
import model.exploitation.toJavaScript.interfaces.DataDeserializer;
import model.exploitation.toJavaScript.metaclasse.ResourceInstance;
import model.exploitation.toJavaScript.metaclasse.VisualizationInstance;
import org.codehaus.plexus.util.FileUtils;
import org.stringtemplate.v4.ST;
import utils.FileOperation;

import java.io.File;
import java.io.IOException;
import java.net.URL;

/**
 * Created by ivan on 17/07/2014.
 */
public class Generator2SmartCampus extends Generator{

    @Override
    public void visit(Visualization visualization) throws VisitorException{
        //svg,dataname,icons
        //Chart
        ST st_chart = Generator.smartcampusgroup.getInstanceOf("map");

        String descPath = "";
        for (Concern con : visualization.getConcerns()) {
            if (con.getClass().getSimpleName().equals("Location")) {
                descPath = (String) con.getParams().get("LocationDescription");//TODO use a const
            }
        }

        String pathToGenerate = (String)symbolTable.get("pathToGenerate");
        try {
            String svg = FileOperation.getStringFromFile(descPath);
            FileOperation.fillFileFromObject(svg,pathToGenerate+"LocationDescription.svg");
        } catch (IOException e) {
            throw new UnableToMoveResources(descPath);
        }

        st_chart.add("svg", "LocationDescription.svg");
        st_chart.add("dataname","data_"+visualization.getName());
        st_chart.add("chartname", visualization.getName());
        for(Resource resource : visualization.getResources()){
            resource.accept(this);
            ST st_icon = (ST) symbolTable.get(resource.getName());
            st_chart.add("icons", st_icon);
        }

        symbolTable.put(visualization.getName(),st_chart);


        //by javascript
        VisualizationInstance vi = new VisualizationInstance(visualization);
        for(Resource resource : visualization.getResources()) {

            DataDeserializer dd = null;
            switch (resource.getFormat()) {
                case SenML:
                    dd = new SenMLDeserializer();
                    break;
                case SmartCampus:
                    dd = new SmartCampusDeserializer();
                    break;
                case Stacked:
                    dd = new StackedDeserializer();
                    break;
                case Custom:
                    dd = new CustomDeserializer();
                    break;
                default:
                    throw new UnhandledDataFormatException();
            }

            ResourceInstance ri = dd.extractInstancesFromResource(resource);
            vi.addResourceInstance(ri);
        }
        ST st_data = Generator.group.getInstanceOf("data");
        st_data.add("dataname","data_"+visualization.getName());
        st_data.add("datavalues",new MapEtienneFormater().convertData2LibraryFormat(vi));
        symbolTable.put("data_"+visualization.getName(),st_data);
    }

    @Override
    public void visit(AtomicResource atomicResource) throws VisitorException {
        ST st_icon = smartcampusgroup.getInstanceOf("icon");
        String path = null;
        for(Concern c :atomicResource.getConcerns())
            if(c.getClass().getSimpleName().equals("Icon"))
                path = (String) c.getParams().get("IconPath");//TODO use a const
        if(path==null)
            throw new IncoherentConcernException("Concern IconPath of "+atomicResource+" non-existent or incoherent.");
        st_icon.add("kind",atomicResource.getName());

        String pathToGenerate = (String)symbolTable.get("pathToGenerate");
        try {
            FileOperation.copyFile(path,pathToGenerate+atomicResource.getName()+".png");
            //TODO handle a local resource as well
        } catch (IOException e) {
            throw new UnableToMoveResources(path);
        }
        st_icon.add("path",atomicResource.getName()+".png");
        symbolTable.put(atomicResource.getName(), st_icon);
    }

    @Override
    public void visit(CompositeResource resource) throws VisitorException {
        //TODO
    }

}
