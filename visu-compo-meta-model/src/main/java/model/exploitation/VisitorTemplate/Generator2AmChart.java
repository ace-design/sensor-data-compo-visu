package model.exploitation.VisitorTemplate;

import exception.VisitorException;
import metaclasses.resource.AtomicResource;
import metaclasses.resource.CompositeResource;
import metaclasses.resource.Element;
import metaclasses.resource.Resource;
import metaclasses.Visualization;
import model.exploitation.toJavaScript.implementation.AmChartFormater;
import model.exploitation.toJavaScript.implementation.SmartCampusDeserializer;
import model.exploitation.toJavaScript.implementation.StackedDeserializer;
import model.exploitation.toJavaScript.interfaces.DataDeserializer;
import model.exploitation.toJavaScript.metaclasse.Source;
import model.exploitation.toJavaScript.metaclasse.Pivot;
import org.stringtemplate.v4.ST;
import utils.NameCorrectness;
import model.exploitation.toJavaScript.implementation.SenMLDeserializer;

import java.util.List;

import static java.util.UUID.randomUUID;

/**
 * Created by ivan on 17/07/2014.
 */
public class Generator2AmChart extends Generator{

    @Override
    public void visit(Visualization visualization) throws VisitorException {
        //Chart
        ST st_chart = Generator.amgroup.getInstanceOf("amchart");
        st_chart.add("chartname", visualization.getName());
        st_chart.add("dataname", "data_"+visualization.getName());
        st_chart.add("categoryname", visualization.getKeyName());

        for(Resource resource : visualization.getResources()){
            resource.accept(this);
            st_chart.add("graphs",symbolTable.get(visualization.getName()+resource.getUrl()));
        }

        symbolTable.put(visualization.getName(),st_chart);


        //by javascript
        Pivot pivot = new Pivot(visualization.getKeyName());
        for(Resource resource : visualization.getResources()) {
            DataDeserializer dd = null;
            switch (resource.getFormat()) {
                case SenML:
                    dd = new SenMLDeserializer();
                    break;
                case SmartCampus:
                    dd = new SmartCampusDeserializer();
                    break;
                case Stacked:
                    dd = new StackedDeserializer();
                    break;
                //TODO add custom
            }

            for(Source s : dd.serializedResource2Pivot(resource))
                pivot.addSource(s);
        }

        ST st_data = Generator.group.getInstanceOf("data");
        st_data.add("dataname","data_"+visualization.getName());
        st_data.add("datavalues", new AmChartFormater().convertTimedData2LibraryFormat(pivot));
        symbolTable.put("data_"+visualization.getName(),st_data);

    }

    @Override
    public void visit(AtomicResource atomicResource) throws VisitorException {
        //TODO : delegate to an Element visitor ?
        for(Element e : atomicResource.getValues()) {
            String graphName = "mygraph_"+NameCorrectness.format(randomUUID().toString());
            //Graph
            ST st_graph = Generator.amgroup.getInstanceOf("graph");
            st_graph.add("chartname", atomicResource.getVisualization().getName());
            st_graph.add("graphname", graphName);
            st_graph.add("seriename", e.getName() + atomicResource.getName());


            //Find the right specialization pattern for the wanted widget
            ST st_graphspe = amgroup.getInstanceOf("graph"+atomicResource.getVisualization().getWidgetName().replace(" ", ""));
            st_graphspe.add("graphname", graphName);
            st_graph.add("graphspe", st_graphspe);

            symbolTable.put(atomicResource.getVisualization().getName()+atomicResource.getUrl(),st_graph);
        }
    }

    @Override
    public void visit(CompositeResource resource) throws VisitorException {
        //TODO
    }

}
