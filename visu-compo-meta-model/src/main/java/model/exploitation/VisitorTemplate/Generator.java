package model.exploitation.VisitorTemplate;

import exception.UnhandledDataFormatException;
import exception.VisitorException;
import metaclasses.Dashboard;
import metaclasses.resource.AtomicResource;
import metaclasses.resource.CompositeResource;
import metaclasses.resource.Resource;
import metaclasses.Visualization;
import org.stringtemplate.v4.ST;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.STGroupDir;

import java.util.HashMap;

/**
 * Created by ivan on 17/07/2014.
 */
public class Generator implements IGenerativeVisitor{

    // We grab the group of string pattern
    private static final String STpath = Generator.class.getClassLoader().getResource("stringtemplates/").getPath();
    //private static final String STpath = Paths.get("").toAbsolutePath().toString()+"/visu-compo-meta-model/src/main/resources/stringtemplates/";
    static STGroup group;
    static STGroup amgroup;
    static STGroup highgroup;

    static HashMap<String, Object> symbolTable;
    static ST myPage;

    public String myPageToString() {
        return myPage.render();
    }

    public Generator(){
        this.symbolTable = new HashMap<>();
        group = new STGroupDir(STpath+"common",'$', '$');
        amgroup = new STGroupDir(STpath+"amchart",'$', '$');
        highgroup = new STGroupDir(STpath+"highchart",'$', '$');
    }

    @Override
    public void visit(Dashboard dashboard) throws VisitorException {
        //create the html page
        this.myPage = group.getInstanceOf("html");

        //organize the needed imports
        if(isAmChartNeeded(dashboard))
            myPage.add("imports",amgroup.getInstanceOf("import_amchart"));
        if(isHighChartNeeded(dashboard))
            myPage.add("imports",highgroup.getInstanceOf("import_highchart"));

        //propagation
        for(Visualization visualization : dashboard.getVisualizationList())
            visualization.accept(this);


    }

    @Override
    public void visit(Visualization visualization) throws VisitorException {
        String chartName = visualization.getName();

        Generator genLibrarySpecific;
        switch (visualization.getLibraryName()) {
            case "AmChart":
                genLibrarySpecific = new Generator2AmChart();
                break;
            case "HighChart":
                genLibrarySpecific = new Generator2HighChart();
                break;
            default:
                throw new UnhandledDataFormatException();
        }
        visualization.accept(genLibrarySpecific);

        ST st_data = (ST) symbolTable.get("data_"+visualization.getName());
        myPage.add("data",st_data);

        ST st_chart = (ST) symbolTable.get(visualization.getName());
        myPage.add("chartsscript", st_chart);

        //Chart Body
        ST st_chartBody = group.getInstanceOf("chartbody");
        st_chartBody.add("chartname", chartName);
        st_chartBody.add("widthpercent", 100 / visualization.getDashboard().getVisualizationList().size());
        myPage.add("chartsbody", st_chartBody);
    }

    @Override
    public void visit(AtomicResource resource) throws VisitorException {

    }

    @Override
    public void visit(CompositeResource resource) throws VisitorException {

    }


    ///////////////////// Private methods /////////////////////

    private void newSymbol(String key, Object o) {
        if (!this.symbolTable.containsKey(key))
            this.symbolTable.put(key, o);
    }

    private static boolean isAmChartNeeded(Dashboard dashboard){
        boolean isNeeded = false;
        for(Visualization v : dashboard.getVisualizationList()) {
            if (v.getLibraryName().equalsIgnoreCase("amchart")) {
                isNeeded = true;
                break;
            }
        }
        return isNeeded;
    }

    private static boolean isHighChartNeeded(Dashboard dashboard){
        boolean isNeeded = false;
        for(Visualization v : dashboard.getVisualizationList()) {
            if (v.getLibraryName().equalsIgnoreCase("highchart")) {
                isNeeded = true;
                break;
            }
        }
        return isNeeded;
    }
}
